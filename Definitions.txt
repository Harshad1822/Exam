DSA Experiments

1. Stack Implementation (Push, Pop, Display)
Definition
A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. Elements are added (pushed) and removed (popped) from the top of the stack.
Algorithm
Push Operation:

Check if the stack is full (i.e., top == size - 1).
If full, display "Stack Overflow".
Else, increment top and add the element at stack[top].

Pop Operation:

Check if the stack is empty (i.e., top == -1).
If empty, display "Stack Underflow".
Else, remove and return the element at stack[top] and decrement top.

Display Operation:

If top == -1, display "Stack is empty".
Else, print all elements from stack[top] to stack[0].

Code
#include <iostream>
using namespace std;

#define SIZE 100

class Stack {
private:
    int arr[SIZE];
    int top;

public:
    Stack() {
        top = -1;
    }

    void push(int value) {
        if (top == SIZE - 1) {
            cout << "Stack Overflow\n";
        } else {
            arr[++top] = value;
            cout << value << " pushed into stack.\n";
        }
    }

    void pop() {
        if (top == -1) {
            cout << "Stack Underflow\n";
        } else {
            cout << arr[top--] << " popped from stack.\n";
        }
    }

    void display() {
        if (top == -1) {
            cout << "Stack is empty\n";
        } else {
            cout << "Stack elements:\n";
            for (int i = top; i >= 0; i--) {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Stack s;
    int choice, value;

    do {
        cout << "\n1.Push\n2.Pop\n3.Display\n4.Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "Enter the value to push: ";
            cin >> value;
            s.push(value);
            break;
        case 2:
            s.pop();
            break;
        case 3:
            s.display();
            break;
        case 4:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 4);

    return 0;
}

2. Queue Implementation (Enqueue, Dequeue, Display)
Definition
A queue is a linear data structure that follows the First In, First Out (FIFO) principle. Elements are added at the rear and removed from the front.
Algorithm
Enqueue Operation:

Check if the queue is full (rear == SIZE - 1).
If full, display "Queue Overflow".
Else, increment rear and insert element at queue[rear].
If front == -1, set front = 0.

Dequeue Operation:

Check if the queue is empty (front == -1 or front > rear).
If empty, display "Queue Underflow".
Else, display the dequeued element and increment front.

Display Operation:

Check if the queue is empty (front == -1 or front > rear).
If empty, display "Queue is empty".
Else, print elements from queue[front] to queue[rear].

Code
#include <iostream>
using namespace std;

#define SIZE 100

class Queue {
private:
    int queue[SIZE];
    int front, rear;

public:
    Queue() {
        front = rear = -1;
    }

    void enqueue(int value) {
        if (rear == SIZE - 1) {
            cout << "Queue Overflow\n";
            return;
        }
        if (front == -1) front = 0;
        queue[++rear] = value;
        cout << value << " enqueued to the queue.\n";
    }

    void dequeue() {
        if (front == -1 || front > rear) {
            cout << "Queue Underflow\n";
            return;
        }
        cout << queue[front++] << " dequeued from the queue.\n";
        if (front > rear) {
            front = rear = -1;
        }
    }

    void display() {
        if (front == -1 || front > rear) {
            cout << "Queue is empty\n";
            return;
        }
        cout << "Queue elements: ";
        for (int i = front; i <= rear; i++) {
            cout << queue[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue q;
    int choice, value;

    do {
        cout << "\n1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter the value to enqueue: ";
            cin >> value;
            q.enqueue(value);
            break;
        case 2:
            q.dequeue();
            break;
        case 3:
            q.display();
            break;
        case 4:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 4);

    return 0;
}

3. Singly Linked List (Create, Insert, Delete, Display)
Definition
A singly linked list is a linear data structure where each node contains data and a pointer to the next node, forming a sequence with a single direction of traversal.
Algorithm
Create Operation:

Create a new node.
Allocate memory and input data.
Set next pointer of the new node to NULL.
If head is NULL, assign the new node to head.
Else, traverse to the last node and add the new node.

Insert Operation (at Position):

Create a new node with input data.
If inserting at position 1:
Point new node to current head.
Set head to new node.


Else:
Traverse to (position-1) node.
Point new node to its next.
Set (position-1) node’s next to new node.



Delete Operation (at Position):

If the list is empty, print "List is empty".
If position is 1:
Point temp to head.
Set head to head's next node.
Delete temp.


Else:
Traverse to (position-1) node.
Store its next node in a temp pointer.
Point (position-1)'s next to temp’s next.
Delete temp.



Display Operation:

Traverse the list from head to NULL.
Print each node's data.

Code
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    void create(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = nullptr;
        
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr)
                temp = temp->next;
            temp->next = newNode;
        }
        cout << value << " added to the list.\n";
    }

    void insert(int pos, int value) {
        Node* newNode = new Node();
        newNode->data = value;

        if (pos == 1) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* temp = head;
            for (int i = 1; temp != nullptr && i < pos - 1; i++) {
                temp = temp->next;
            }
            if (temp == nullptr) {
                cout << "Position out of bounds\n";
                return;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }
        cout << value << " inserted at position " << pos << ".\n";
    }

    void remove(int pos) {
        if (head == nullptr) {
            cout << "List is empty\n";
            return;
        }

        Node* temp;
        if (pos == 1) {
            temp = head;
            head = head->next;
            delete temp;
            cout << "Node at position 1 deleted.\n";
        } else {
            Node* prev = head;
            for (int i = 1; prev != nullptr && i < pos - 1; i++) {
                prev = prev->next;
            }

            if (prev == nullptr || prev->next == nullptr) {
                cout << "Position out of bounds\n";
                return;
            }

            temp = prev->next;
            prev->next = temp->next;
            delete temp;
            cout << "Node at position " << pos << " deleted.\n";
        }
    }

    void display() {
        if (head == nullptr) {
            cout << "List is empty\n";
            return;
        }

        Node* temp = head;
        cout << "Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main() {
    SinglyLinkedList list;
    int choice, val, pos;

    do {
        cout << "\n1.Create\n2.Insert\n3.Delete\n4.Display\n5.Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to add: ";
            cin >> val;
            list.create(val);
            break;
        case 2:
            cout << "Enter position and value to insert: ";
            cin >> pos >> val;
            list.insert(pos, val);
            break;
        case 3:
            cout << "Enter position to delete: ";
            cin >> pos;
            list.remove(pos);
            break;
        case 4:
            list.display();
            break;
        case 5:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 5);

    return 0;
}

4. Bubble Sort
Definition
Bubble Sort is a simple comparison-based sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order, pushing larger elements to the end.
Algorithm
Bubble Sort Algorithm:

Start with the first element in the array.
Compare the current element with the next element.
If the current element is greater than the next element, swap them.
Repeat steps 2-3 for each pair of adjacent elements in the array.
After each pass, the largest unsorted element moves to its correct position.
Repeat the process for (n-1) passes where n is the number of elements.
After all passes, the array will be sorted.

Time Complexity:

Best Case: O(n) [when the array is already sorted]
Average Case: O(n²)
Worst Case: O(n²)

Code
#include <iostream>
using namespace std;

class BubbleSort {
public:
    void sort(int arr[], int n) {
        bool swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) break;
        }
    }

    void display(int arr[], int n) {
        cout << "Sorted Array: ";
        for (int i = 0; i < n; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    BubbleSort sorter;
    int n;

    cout << "Enter the number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    sorter.sort(arr, n);
    sorter.display(arr, n);

    return 0;
}

5. Singly Linked List (Create, Search, Display)
Definition
A singly linked list is a linear data structure where nodes are linked sequentially, each containing data and a pointer to the next node, allowing operations like creation, searching, and display.
Algorithm
Create Operation:

Input the value to be inserted.
Create a new node and assign the value to it.
If the list is empty (i.e., head is NULL), make the new node the head.
Otherwise, traverse the list to the last node.
Set the next pointer of the last node to the new node.

Search Operation:

Input the value to be searched.
Start from the head node.
Traverse each node and compare its data with the target value.
If found, print the position.
If the traversal completes without finding the value, print "Not found".

Display Operation:

If the list is empty, print "List is empty".
Start from the head and traverse the list.
Print the data of each node followed by an arrow (->).
Stop at the last node and print NULL.

Code
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    void create(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr)
                temp = temp->next;
            temp->next = newNode;
        }
        cout << value << " added to the list.\n";
    }

    void search(int key) {
        Node* temp = head;
        int position = 1;
        bool found = false;

        while (temp != nullptr) {
            if (temp->data == key) {
                cout << "Element " << key << " found at position " << position << ".\n";
                found = true;
                break;
            }
            temp = temp->next;
            position++;
        }

        if (!found)
            cout << "Element " << key << " not found in the list.\n";
    }

    void display() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "Linked List: ";
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main() {
    SinglyLinkedList list;
    int choice, val;

    do {
        cout << "\n1. Create\n2. Search\n3. Display\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to insert: ";
            cin >> val;
            list.create(val);
            break;
        case 2:
            cout << "Enter value to search: ";
            cin >> val;
            list.search(val);
            break;
        case 3:
            list.display();
            break;
        case 4:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice.\n";
        }
    } while (choice != 4);

    return 0;
}

6. Binary Tree Traversal (Inorder, Preorder, Postorder)
Definition
A binary tree is a hierarchical data structure where each node has at most two children (left and right). Traversals (Inorder, Preorder, Postorder) visit nodes in specific orders.
Algorithm
Tree Node Structure:

Each node contains:
Data
Pointer to left child
Pointer to right child



Inorder Traversal (Left → Root → Right):

Traverse the left subtree.
Visit the root node.
Traverse the right subtree.

Preorder Traversal (Root → Left → Right):

Visit the root node.
Traverse the left subtree.
Traverse the right subtree.

Postorder Traversal (Left → Right → Root):

Traverse the left subtree.
Traverse the right subtree.
Visit the root node.

Code
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

class BinaryTree {
public:
    Node* root;

    BinaryTree() {
        root = nullptr;
    }

    Node* createNode(int data) {
        return new Node(data);
    }

    void inorder(Node* node) {
        if (node == nullptr) return;
        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }

    void preorder(Node* node) {
        if (node == nullptr) return;
        cout << node->data << " ";
        preorder(node->left);
        preorder(node->right);
    }

    void postorder(Node* node) {
        if (node == nullptr) return;
        postorder(node->left);
        postorder(node->right);
        cout << node->data << " ";
    }
};

int main() {
    BinaryTree tree;

    tree.root = tree.createNode(1);
    tree.root->left = tree.createNode(2);
    tree.root->right = tree.createNode(3);
    tree.root->left->left = tree.createNode(4);
    tree.root->left->right = tree.createNode(5);
    tree.root->right->left = tree.createNode(6);
    tree.root->right->right = tree.createNode(7);

    cout << "Inorder Traversal: ";
    tree.inorder(tree.root);
    cout << "\n";

    cout << "Preorder Traversal: ";
    tree.preorder(tree.root);
    cout << "\n";

    cout << "Postorder Traversal: ";
    tree.postorder(tree.root);
    cout << "\n";

    return 0;
}

7. Linear Search and Binary Search
Definition
Linear Search sequentially checks each element in an array for a target value, while Binary Search efficiently searches a sorted array by repeatedly dividing the search interval in half.
Algorithm
Linear Search:

Start from the first element of the array.
Compare each element with the target value.
If a match is found, return the index (or position).
If end of array is reached without a match, return -1 or "not found". Time Complexity:


Best Case: O(1)
Worst Case: O(n)

Binary Search:

Array must be sorted.
Initialize two pointers: low = 0, high = n-1.
Find the middle index: mid = (low + high) / 2.
If arr[mid] == key, return mid.
If arr[mid] > key, search the left half.
If arr[mid] < key, search the right half.
Repeat until low > high. Time Complexity:


Best Case: O(1)
Worst Case: O(log n)

Code
#include <iostream>
using namespace std;

class SearchAlgorithms {
public:
    void linearSearch(int arr[], int n, int key) {
        for (int i = 0; i < n; i++) {
            if (arr[i] == key) {
                cout << "Linear Search: Element found at position " << (i + 1) << ".\n";
                return;
            }
        }
        cout << "Linear Search: Element not found.\n";
    }

    void binarySearch(int arr[], int n, int key) {
        int low = 0, high = n - 1, mid;

        while (low <= high) {
            mid = (low + high) / 2;

            if (arr[mid] == key) {
                cout << "Binary Search: Element found at position " << (mid + 1) << ".\n";
                return;
            } else if (arr[mid] < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        cout << "Binary Search: Element not found.\n";
    }
};

int main() {
    SearchAlgorithms search;
    int n, key;

    cout << "Enter number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " sorted elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Enter the element to search: ";
    cin >> key;

    search.linearSearch(arr, n, key);
    search.binarySearch(arr, n, key);

    return 0;
}

8. Adjacency Matrix Implementation
Definition
An adjacency matrix is a 2D array used to represent a graph, where the element at matrix[i][j] indicates whether there is an edge between vertices i and j.
Algorithm
Adjacency Matrix Basics:

A 2D array is used to represent a graph.
For a graph with V vertices, create a matrix of size V x V.
If there's an edge between vertex i and vertex j, set matrix[i][j] = 1.
If there's no edge, set matrix[i][j] = 0.
For undirected graphs, the matrix is symmetric: matrix[i][j] = matrix[j][i].

Steps:

Input the number of vertices (V) and number of edges (E).
Initialize a V x V matrix with all zeros.
For each edge, input the source and destination.
Set matrix[src][dest] = 1.
If undirected, also set matrix[dest][src] = 1.
Display the matrix.

Code
#include <iostream>
using namespace std;

class Graph {
private:
    int vertices;
    int adjMatrix[20][20];

public:
    Graph(int v) {
        vertices = v;
        for (int i = 0; i < vertices; i++)
            for (int j = 0; j < vertices; j++)
                adjMatrix[i][j] = 0;
    }

    void addEdge(int src, int dest, bool isDirected = false) {
        adjMatrix[src][dest] = 1;
        if (!isDirected) {
            adjMatrix[dest][src] = 1;
        }
    }

    void display() {
        cout << "\nAdjacency Matrix:\n";
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                cout << adjMatrix[i][j] << " ";
            }
            cout << "\n";
        }
    }
};

int main() {
    int v, e;
    cout << "Enter number of vertices: ";
    cin >> v;

    Graph g(v);

    cout << "Enter number of edges: ";
    cin >> e;

    cout << "Enter edges (source and destination indices starting from 0):\n";
    for (int i = 0; i < e; i++) {
        int src, dest;
        cin >> src >> dest;
        g.addEdge(src, dest);
    }

    g.display();

    return 0;
}

9. Dijkstra's Shortest Path Algorithm
Definition
Dijkstra’s Algorithm finds the shortest path from a source node to all other nodes in a weighted graph with non-negative weights, using a greedy approach.
Algorithm
Dijkstra’s Algorithm:

Initialization:
Mark all distances as infinite (INF), except for the source node (distance = 0).
Create a priority queue (min-heap) to store the current node with its distance from the source.


Steps:
Choose the node with the smallest distance from the priority queue.
For each neighboring node, calculate the potential shorter path distance.
If a shorter path is found, update the distance and add the neighbor to the priority queue.
Repeat until all nodes have been visited.


Termination:
Once all nodes have the shortest distance computed, the algorithm terminates.



Time Complexity:

O(V^2) for an adjacency matrix.
O((V + E) log V) using a priority queue, where V is vertices and E is edges.

Code
#include <iostream>
#include <climits>
#include <vector>
#include <queue>
using namespace std;

class Graph {
private:
    int V;
    vector<pair<int, int>> *adjList;

public:
    Graph(int v) {
        V = v;
        adjList = new vector<pair<int, int>>[V];
    }

    void addEdge(int src, int dest, int weight) {
        adjList[src].push_back(make_pair(dest, weight));
        adjList[dest].push_back(make_pair(src, weight));
    }

    void dijkstra(int source) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> dist(V, INT_MAX);
        dist[source] = 0;
        pq.push(make_pair(0, source));

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (auto &neighbor : adjList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push(make_pair(dist[v], v));
                }
            }
        }

        cout << "Shortest distances from source vertex " << source << ":\n";
        for (int i = 0; i < V; i++) {
            if (dist[i] == INT_MAX) {
                cout << "Vertex " << i << ": No path\n";
            } else {
                cout << "Vertex " << i << ": " << dist[i] << "\n";
            }
        }
    }
};

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    Graph g(V);

    cout << "Enter " << E << " edges (source, destination, weight):\n";
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        g.addEdge(src, dest, weight);
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    g.dijkstra(source);

    return 0;
}

10. Hash Table Implementation
Definition
A hash table is a data structure that maps keys to values using a hash function, allowing efficient insertion, deletion, and searching, with collision resolution via separate chaining.
Algorithm
Hash Table Operations:

Insertion:
Calculate the hash index for the key using a hash function.
If the index is empty, insert the key-value pair.
If there is a collision, handle it using separate chaining (linked list).


Search:
Calculate the hash index for the key.
If the key is found at the index, return the value.
If there is a collision, traverse the linked list at that index.


Deletion:
Calculate the hash index for the key.
If the key is found at the index, remove it from the linked list.



Hash Function:

index = key % table_size.

Code
#include <iostream>
#include <list>
using namespace std;

class HashTable {
private:
    int size;
    list<pair<int, string>> *table;

public:
    HashTable(int s) {
        size = s;
        table = new list<pair<int, string>>[size];
    }

    int hashFunction(int key) {
        return key % size;
    }

    void insert(int key, string value) {
        int index = hashFunction(key);
        table[index].push_back(make_pair(key, value));
        cout << "Inserted (" << key << ", " << value << ") at index " << index << endl;
    }

    void search(int key) {
        int index = hashFunction(key);
        bool found = false;
        for (auto &x : table[index]) {
            if (x.first == key) {
                cout << "Found (" << key << ", " << x.second << ") at index " << index << endl;
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "Key " << key << " not found.\n";
        }
    }

    void remove(int key) {
        int index = hashFunction(key);
        bool found = false;
        for (auto it = table[index].begin(); it != table[index].end(); ++it) {
            if (it->first == key) {
                table[index].erase(it);
                cout << "Deleted key " << key << " from index " << index << endl;
                found = true;
                break;
            }
        }
        if (!found) {
            cout << "Key " << key << " not found.\n";
        }
    }

    void display() {
        for (int i = 0; i < size; i++) {
            cout << "Index " << i << ": ";
            for (auto &x : table[i]) {
                cout << "(" << x.first << ", " << x.second << ") ";
            }
            cout << endl;
        }
    }
};

int main() {
    HashTable ht(7);

    ht.insert(10, "Apple");
    ht.insert(20, "Banana");
    ht.insert(30, "Cherry");
    ht.insert(17, "Date");

    ht.display();

    ht.search(10);
    ht.search(25);

    ht.remove(20);

    ht.display();

    return 0;
}