// 1.Adjacency Matrix

#include<iostream>
#include<vector>
using namespace std;


const int v=6;
// Function to initialize the adjacency matrix.

void initAdjMatrix(int adjMatrix[v][v])
{
    // Initialize all elements of the adjacency matrix to 0.
    for(int i=0;i<v;i++)
    {
        for(int j=0;j<v;j++)
        {
            adjMatrix[i][j]=0;
        }
    }
}

void addEdge(int adjMatrix[v][v],int u,int v)
{
    // Mark the edge betwn vertices u and v as 1.
    adjMatrix[u][v]=1;
    // For undirected graph. 
    adjMatrix[v][u]=1;
}


// Function to print the adjacency matrix.
void printAdjMatrix(int adjMatrix[v][v])
{
    for (int i=0;i<v;i++)
    {
        for(int j=0;j<v;j++)
        {
            cout<<adjMatrix[i][j]<<" ";
        }
        cout<<endl;
    }
}

int main()
{
    int adjMatrix[v][v];

    initAdjMatrix(adjMatrix);

    addEdge(adjMatrix,0,3);
    addEdge(adjMatrix,0,4);
    addEdge(adjMatrix,1,4);
    addEdge(adjMatrix,1,5);
    addEdge(adjMatrix,1,2);
    addEdge(adjMatrix,2,5);
    addEdge(adjMatrix,2,3);
    addEdge(adjMatrix,3,5);
    addEdge(adjMatrix,4,5);


    cout<<"Adjacency Mtrix: "<<endl;

    printAdjMatrix(adjMatrix);

    return 0;
    
}


// 2.Bubble Sort

// 5.. Write a C++ Program for Implementation of Bubble Sort Algorithm.

#include <iostream>
using namespace std;

// Function to perform Bubble Sort
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        bool swapped = false;

        // Last i elements are already in place
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;

                swapped = true;
            }
        }

        // If no two elements were swapped in inner loop, array is sorted
        if (!swapped)
            break;
    }
}

// Function to display the array
void displayArray(int arr[], int n) {
    cout << "Array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Main function
int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int arr[n];

    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    cout << "\nOriginal ";
    displayArray(arr, n);

    bubbleSort(arr, n);

    cout << "\nSorted ";
    displayArray(arr, n);

    return 0;
}



// 3.Dijktras

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int INF = 1e9; // Infinity

//Dijkstra's Algorithm
void dijkstra(int V, vector<pair<int, int>> adj[], int source) {
    vector<int> dist(V, INF);
    dist[source] = 0;

    // Min-heap: {distance, vertex}
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});

    while (!pq.empty()) {
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        for (auto edge : adj[u]) {
            int v = edge.first;
            int weight = edge.second;

            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    // Output shortest distances
    cout << "Vertex\tDistance from Source " << source << endl;
    for (int i = 0; i < V; ++i) {
        cout << i << "\t" << dist[i] << endl;
    }
}

int main() {
    int V = 5; // Number of vertices
    vector<pair<int, int>> adj[V];

    // Add edges: adj[u].push_back({v, weight});
    adj[0].push_back({1, 2});
    adj[0].push_back({2, 4});
    adj[1].push_back({2, 1});
    adj[1].push_back({3, 7});
    adj[2].push_back({4, 3});
    adj[3].push_back({4, 1});

    int source = 0;
    dijkstra(V, adj, source);

    return 0;
}

// 4.Hash Linear probing

#include <iostream>
using namespace std;
class HashTable
{
private:
    int *table;
    int size;
    int empty; // Represents an empty slot
public:
    HashTable(int s) 
    {
        size = s;
        empty = -1;
        table = new int[size];
        for (int i = 0; i < size; i++)
            table[i] = empty;
    }

    // Hash function
    int hashFunction(int key) 
    {
        return key % size;
    }





    // Insert function with linear probing
    void insert(int key) 
    {
        int index = hashFunction(key);
        int originalIndex = index;

        while (table[index] != empty) 
        {
            index = (index + 1) % size;
            if (index == originalIndex) 
            { // Table is full
                cout << "Hash table is full, cannot insert " << key << endl;
                return;
            }
        }
        table[index] = key;
        cout << "Inserted " << key << " at index " << index << endl;
    }

 
    // Display function
    void display() 
    {
        for (int i = 0; i < size; i++) 
        {
            if (table[i] != empty)
                cout << i << " --> " << table[i] << endl;
            else
                cout << i << " --> " << "Empty" << endl;
        }
    }

    // Destructor
    ~HashTable() {
        delete[] table;
    }
};

int main() 
{
    int size, choice, key;
    cout << "Enter size of hash table: ";
    cin >> size;
    HashTable ht(size);

    do 
    {
        cout << "\n1. Insert\n2. Display\n3. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) 
        {
            case 1:
                cout << "Enter key to insert: ";
                cin >> key;
                ht.insert(key);
                break;
            case 2:
                ht.display();
                break;
            case 3:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 3);

    return 0;
}


// 5.Linear & Binary search

// Linear Search

// #include <iostream>
// using namespace std;

// int linearSearch(int arr[], int size, int target) {
//     for (int i = 0; i < size; i++) {
//         if (arr[i] == target) {
//             return i; // Return the index if the target is found
//         }
//     }
//     return -1; // Return -1 if the target is not found
// }

// int main() {
//     int arr[] = {10, 20, 30, 40, 50};
//     int size = sizeof(arr) / sizeof(arr[0]);
//     int target;

//     cout << "Enter the number to search: ";
//     cin >> target;

//     int result = linearSearch(arr, size, target);

//     if (result != -1) {
//         cout << "Element found at index " << result << endl;
//     } else {
//         cout << "Element not found" << endl;
//     }

//     return 0;
// }




// Binary Search

#include <bits/stdc++.h>
using namespace std;

// An iterative binary search function.
int binarySearch(int arr[], int low, int high, int x)
{
    while (low <= high) {
        int mid = low + (high - low) / 2;

        // Check if x is present at mid
        if (arr[mid] == x)
            return mid;

        // If x greater, ignore left half
        if (arr[mid] < x)
            low = mid + 1;

        // If x is smaller, ignore right half
        else
            high = mid - 1;
    }

    // If we reach here, then element was not present
    return -1;
}

// Driver code
int main(void)
{
    int arr[] = { 2, 3, 4, 10, 40 };
    int x = 10;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    if(result == -1) cout << "Element is not present in array";
    else cout << "Element is present at index " << result;
    return 0;
}


// 6.Linked_List_Create_Insert_Delete_and_Display

// 3.Write a C++ Program for Single Linked List Create, Insert, Delete and Display operation
#include <iostream>
using namespace std;

struct Node {
    int num;
    Node *next;
};

Node *head = NULL;

void insert_Node(int n) {
    Node *new_node = new Node;
    new_node->num = n;
    new_node->next = head;
    head = new_node;
}

void insert_Nodelast(int n) {
    Node *new_Node = new Node();
    new_Node->num = n;
    new_Node->next = NULL;

    if (head == NULL) {
        head = new_Node;
    } else {
        Node *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_Node;
    }
}

void insert_at_position(int n, int pos) {
    Node *new_node = new Node;
    new_node->num = n;
    new_node->next = NULL;

    if (pos == 1) {
        new_node->next = head;
        head = new_node;
        return;
    }

    Node *temp = head;
    for (int i = 1; temp != NULL && i < pos - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "Position out of range\n";
        delete new_node;
        return;
    }

    new_node->next = temp->next;
    temp->next = new_node;
}

void delete_first_node() {
    if (head != NULL) {
        Node *temp = head;
        head = head->next;
        delete temp;
    }
}

void delete_last_node() {
    if (head == NULL) return;

    if (head->next == NULL) {
        delete head;
        head = NULL;
        return;
    }

    Node *temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }

    delete temp->next;
    temp->next = NULL;
}

void delete_at_position(int pos) {
    if (head == NULL || pos < 1) {
        cout << "Invalid position\n";
        return;
    }

    if (pos == 1) {
        Node *temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node *temp = head;
    for (int i = 1; temp != NULL && i < pos - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) {
        cout << "Position out of range\n";
        return;
    }

    Node *node_to_delete = temp->next;
    temp->next = node_to_delete->next;
    delete node_to_delete;
}

void display_all_nodes() {
    cout << "The list contains the data entered:\n";
    Node *temp = head;
    while (temp != NULL) {
        cout << temp->num << " ";
        temp = temp->next;
    }
    cout << endl;
}

void reverse() {
    Node *temp = head;
    Node *prev = NULL, *next = NULL;

    while (temp != NULL) {
        next = temp->next;
        temp->next = prev;
        prev = temp;
        temp = next;
    }
    head = prev;
}

int main() {
    int ch, val, pos;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert at Begin\n";
        cout << "2. Insert at Last\n";
        cout << "3. Insert at Position\n";
        cout << "4. Delete First Node\n";
        cout << "5. Delete Last Node\n";
        cout << "6. Delete Node at Position\n";
        cout << "7. Display\n";
        cout << "8. Exit\n";
        cout << "\nEnter your Choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "Enter value to insert at beginning: ";
                cin >> val;
                insert_Node(val);
                break;
            case 2:
                cout << "Enter value to insert at last: ";
                cin >> val;
                insert_Nodelast(val);
                break;
            case 3:
                cout << "Enter value and position: ";
                cin >> val >> pos;
                insert_at_position(val, pos);
                break;
            case 4:
                delete_first_node();
                cout << "First node deleted.\n";
                break;
            case 5:
                delete_last_node();
                cout << "Last node deleted.\n";
                break;
            case 6:
                cout << "Enter position to delete: ";
                cin >> pos;
                delete_at_position(pos);
                break;
            case 7:
                display_all_nodes();
                break;
            case 8:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (ch != 8);

    return 0;
}


// 7.Linked_List_Create_Search_and_Display
// 4. Write a C++ Program for Single Linked List Create, Search and Display operations
#include <iostream>
using namespace std;

// Define structure for a node
struct Node {
    int data;
    Node* next;
};

// Head pointer
Node* head = NULL;

// Function to create (insert at end)
void createNode(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    cout << "Node with value " << value << " created.\n";
}

// Function to search a value
void searchNode(int value) {
    Node* temp = head;
    int position = 1;
    bool found = false;

    while (temp != NULL) {
        if (temp->data == value) {
            cout << "Value " << value << " found at position " << position << ".\n";
            found = true;
            break;
        }
        temp = temp->next;
        position++;
    }

    if (!found) {
        cout << "Value " << value << " not found in the list.\n";
    }
}

// Function to display all nodes
void displayList() {
    Node* temp = head;
    if (temp == NULL) {
        cout << "List is empty.\n";
        return;
    }

    cout << "Linked List: ";
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

// Main function with menu
int main() {
    int choice, value;

    do {
        cout << "\nMenu:\n";
        cout << "1. Create Node (Insert at end)\n";
        cout << "2. Search Node\n";
        cout << "3. Display List\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                createNode(value);
                break;
            case 2:
                cout << "Enter value to search: ";
                cin >> value;
                searchNode(value);
                break;
            case 3:
                displayList();
                break;
            case 4:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }

    } while (choice != 4);

    return 0;
}


// 8.Queue
// 2.Write a C++ Program for Queue Implementation Enquene, Dequeue and Display Operation.
#include <iostream>
using namespace std;

int q[7], front = -1, rear = -1, val, n = 7;

// Enqueue function
void enqueue(int val) {
    if (rear == n - 1) {
        cout << "Queue is full\n";
    } else {
        if (front == -1) front = 0;  // Set front to 0 if inserting first element
        rear++;
        q[rear] = val;
        cout << "Enqueued: " << val << endl;
    }
}

// Dequeue function
void dequeue() {
    if (front == -1 || front > rear) {
        cout << "Queue is empty (Underflow)\n";
    } else {
        cout << "The dequeued element is: " << q[front] << endl;
        front++;
        
        // Reset front and rear if queue becomes empty
        if (front > rear) {
            front = rear = -1;
        }
    }
}

// Display function
void display() {
    if (front == -1 || front > rear) {
        cout << "Queue is empty\n";
    } else {
        cout << "Queue elements are: ";
        for (int i = front; i <= rear; i++) {
            cout << q[i] << " ";
        }
        cout << endl;
    }
}

// Main function with menu-driven approach
int main() {
    int ch;
    cout << "Queue Operations\n";
    cout << "1. Enqueue into Queue\n";
    cout << "2. Dequeue from Queue\n";
    cout << "3. Display Queue\n";
    cout << "4. Exit\n";

    do {
        cout << "Enter your choice: ";
        cin >> ch;
        switch (ch) {
            case 1:
                cout << "Enter value to enqueue: ";
                cin >> val;
                enqueue(val);
                break;
            case 2:
                cout << "Welcome to Dequeue\n";
                dequeue();
                break;
            case 3:
                cout << "Welcome to Display\n";
                display();
                break;
            case 4:
                cout << "Exiting the program...\n";
                break;
            default:
                cout << "Invalid choice\n";
        }
    } while (ch != 4);

    return 0;
}

// 9.Stack
// 1.Write a C++ program for Stack Implementation Push, Pop and Display Operation.
#include <iostream>
using namespace std;

int s[7],t=-1,val,n=7;

void push(int val)
{
    if(t==n-1)  
    cout<<"Stack is full\n";
    else
    {
        t=t+1;
        s[t]=val;
        
    }
}

void pop()
{
    if(t<=-1)
    cout<<"Stack Underflow"<<endl;
    else
    {
        cout<<"The pooped element is"<<s[t]<<endl;
        t--;
    }
}


void display()
{
    if(t>=0)
    {
        cout<<"Stack elements are:";
        for(int i=t;i>=0;i--)
        cout<<s[i]<<" ";
        cout<<endl;
    }
    else
    cout<<"Stack is empty";
}

int main()
{
    int ch;
    cout<<"Stack operation\n";
    cout<<"1.Push into Stack\n";
    cout<<"2.Pop into Stack\n";
    cout<<"3.Display into Stack\n";
    cout<<"4.Exit the operation\n";
    
    do
    {
        cout<<"Enter your choice\n";
        cin>>ch;
        switch(ch)
        {
            case 1:
            cout<<"Enter value to push\n";
            cin>>val;
            push(val);
            break;
            
            case 2:
            cout<<"Welcome to pop\n";
            pop();
            break;
            
            case 3:
            cout<<"Welcome to display\n";
            display();
            break;

            case 4:
            cout<<"Exited Operation\n";
            
            default:
            cout<<"Invalied choice\n";
        }
    }while(ch!=4);
}

// 10.Tree traversal Inorder,preorder,postorder

#include <iostream>
using namespace std;

struct Node {
  int data;
  Node* left;
  Node* right;
};

Node* createNode(int data) {
  Node* newNode = new Node();
  newNode->data = data;
  newNode->left = newNode->right = nullptr;
  return newNode;
}

Node* insertNode(Node* root, int data) {
  if (root == nullptr) {
    return createNode(data);
  }

  if (data < root->data) {
    root->left = insertNode(root->left, data);
  } else if (data > root->data) {
    root->right = insertNode(root->right, data);
  }

  return root;
}

void inorderTraversal(Node* root) {
  if (root != nullptr) {
    inorderTraversal(root->left);
    cout << root->data << " ";
    inorderTraversal(root->right);
  }
}

void preorderTraversal(Node* root) {
  if (root != nullptr) {
    cout << root->data << " ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
  }
}

void postorderTraversal(Node* root) {
  if (root != nullptr) {
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout << root->data << " ";
  }
}

int main() {
  Node* root = nullptr;
  root = insertNode(root, 80);
  root = insertNode(root, 30);
  root = insertNode(root, 50);
  root = insertNode(root, 40);
  root = insertNode(root, 76);
  root = insertNode(root, 10);
  root = insertNode(root, 55);

  cout << "In-order traversal of the given binary search tree is: ";
  inorderTraversal(root);
  cout << endl;

  cout << "Pre-order traversal of the given binary search tree is: ";
  preorderTraversal(root);
  cout << endl;
  
  cout << "Post-order traversal of the given binary search tree is: ";
  postorderTraversal(root);
  cout << endl;


  return 0;
}


// extra
// 11.Balancing Parenthesis
#include <iostream>
#include <stack>
using namespace std;
// Function to check if parentheses are balanced
bool isBalanced(string expr)
 {
    stack<char> s;

    for (char ch : expr)
 {
        if (ch == '(' || ch == '{' || ch == '[')
 {
            s.push(ch); // Push opening brackets onto the stack
        } else if (ch == ')' || ch == '}' || ch == ']')
 {
            if (s.empty()) return false; // Unmatched closing bracket
            char top = s.top();
            s.pop();

            // Check if the popped element matches the current closing bracket
            if ((ch == ')' && top != '(') ||
                (ch == '}' && top != '{') ||
                (ch == ']' && top != '[')) {
                return false;
            }
        }
    }

    return s.empty(); // If stack is empty, parentheses are balanced
}

int main()
{
    string expr;
    cout << "Enter an expression: ";
    cin >> expr;
    if (isBalanced(expr))
    {
        cout << "Balanced Parentheses" << endl;
    }
 else 
{
        cout << "Unbalanced Parentheses" << endl;
}
    return 0;
}

// Sample Input


// Enter an expression: (a+b)*{c+[d-e]}
// Balanced Parentheses

// Enter an expression: (a+b]*{c+2}
// Unbalanced Parentheses
